name: Auto Analysis Runner

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      commit:
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Debug Docker Path and Version
        run: |
          echo "PATH is: $PATH"
          which docker
          docker --version

      - name: Checkout Testing Repository and create three copies for each analysis
        run: |
          REPO_URL="https://github.com/${{ inputs.project }}.git"
          REPO_NAME=$(basename "${{ inputs.project }}")
          
          git clone "$REPO_URL" "$REPO_NAME"
          cd "$REPO_NAME"

          if [ -n "${{ inputs.commit }}" ]; then
            echo "Checking out specific commit: ${{ inputs.commit }}"
            git checkout ${{ inputs.commit }}
          else
            echo "Using default branch"
          fi

          cd ..

          cp -r "$REPO_NAME" "$REPO_NAME-original"
          cp -r "$REPO_NAME" "$REPO_NAME-pymop"
          cp -r "$REPO_NAME" "$REPO_NAME-dylin"

      - name: Checkout Auto-PyMOP Repository
        uses: actions/checkout@v4
        with:
          repository: ContinuousAnalysis/auto-pymop
          path: auto-pymop

      - name: Run Original Test
        run: |
          # Extract just the repository name (without owner)
          REPO_NAME=$(echo "${{ inputs.project }}" | sed 's/.*\///')
          echo "Repository name: $REPO_NAME"
          
          python3 -m venv original-test-venv
          source original-test-venv/bin/activate
          chmod +x auto-pymop/scripts/run_original.sh
          auto-pymop/scripts/run_original.sh $REPO_NAME
          deactivate
          rm -rf original-test-venv
          rm -rf $REPO_NAME-original

      - name: Build PyMOP Docker Image
        run: |
          sudo docker build -t pymop-runner auto-pymop/docker_files

      - name: Run PyMOP on Testing Repository
        id: run_pymop
        shell: bash
        run: |
          # Extract just the repository name (without owner)
          REPO_NAME=$(echo "${{ inputs.project }}" | sed 's/.*\///')
          echo "Repository name: $REPO_NAME"
          
          docker run --rm \
            -v "${{ github.workspace }}:/local" \
            pymop-runner \
            bash -c "set -euxo pipefail && \
            ls -la /local && \
            cp /local/auto-pymop/scripts/run_pymop.sh /workspace/run_pymop.sh && \
            cp -r /local/$REPO_NAME-pymop /workspace && \
            source /workspace/pymop-venv/bin/activate && \
            chmod +x /workspace/run_pymop.sh && \
            /workspace/run_pymop.sh $REPO_NAME && \
            deactivate"

      - name: Parse PyMOP Output for Violations
        run: |
          # Extract just the repository name (without owner)
          REPO_NAME=$(echo "${{ inputs.project }}" | sed 's/.*\///')
          echo "Repository name: $REPO_NAME"
          python3 auto-pymop/scripts/parse_pymop_output.py $REPO_NAME

      - name: Upload Violation Reports
        uses: actions/upload-artifact@v4
        with:
          name: pymop-violations-${{ github.run_id }}
          path: |
            pymop_results_*.csv
            pymop_over_time_results.csv
            pymop-output/
          retention-days: 30
